# -*- coding: utf-8 -*-
"""Plotly svg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mon5SEXhgErcIehSBMtLy0oWzEc16Fqc
"""

#######################################################################
# Gráfica para convertir en SVG                                       #
#######################################################################

"""# Recursos del Fondo de Garantía de Depósitos FOGADE"""

# %%
from plotly.offline import plot
import plotly.graph_objs as go

# %%
x = ["2013",
           "2014",
           "2015",
           "2016",
           "2017",
           "2018",
            "2019",
 #           "Ene-20",
 #           "Feb-20",
             'Mar-20',
 #            'Abr-20',
 #            'May-20',
             'Jun-20',
             'Jul-20',
             'Ago-20']
y = [119.3,
             129.3,
             139.8,
             152.1,
             165.8,
             181.7,
             198.5,
#             199.5,
#             200.5,
             201.5,
#             202.3,
#             203.1,
              203.9,
              204.6,
              205.4]
fig = go.Figure(data=[go.Bar(
            x=x, y=y,
            text=y,
            textposition='auto',
           marker={"color": list(range(2,15)), 'colorscale':'blugrn'})])


fig.update_layout(barmode='stack', xaxis_type='category',
                   title='<b></b><b>Recursos del Fondo de Garantía de Depósitos FOGADE</b><br><i>Saldo en millones de dólares</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=18,
        color="#000000"
        ),
       annotations=[
        dict(
            x=0.5,
            y=-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

# %%
################################################################################
################################################################################
# %%
"""# Depósitos Garantizados por FOGADE"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots

#Fig = go.Figure()
fig = make_subplots(specs=[[{"secondary_y": True}]])


x1 = ["2013",
           "2014",
           "2015",
           "2016",
           "2017",
           "2018",
            "2019",
         'Mar-20',
#         'Abr-20',
#         'May-20',
         'Jun-20',
         'Jul-20',
         'Ago-20']

y1 = [    808.0,
           867.8,
           926.1,
           994.6,
          1065.7,
           867.9,
           895.9,
           905.4,
#           935,
#           921,
            934.7,
            950.3,
            956.4]

y2 = [    3.3,
           7.4,
           6.7,
           7.4,
           7.3,
         -18.6,
           3.2,
           1.1,
#           4.35,
#           2.75,
            4.3,
            6.1,
            6.8]

fig.add_trace(go.Bar(
    x = x1,

y = y1,
           text=y1,
            textposition='auto',
           marker={"color": '#3498DB'},
           name="Depósitos Garantizados"),
           secondary_y=False,
)

fig.add_trace(go.Scatter(
    x = x1,
y = y2,
           text=y2,
           textposition='top center',
           texttemplate = "%{text}%",
           mode='lines+markers+text',
          name="Crecimiento Interanual"

),
           secondary_y=True,

           )


fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', xaxis_type='category', legend_orientation="h",
                   title='<b></b><b>Depósitos Garantizados por FOGADE</b><br><i>Saldo en millones de dólares</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=18,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.22, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%

fig.show()

# %%
"""# Participación de los Depósitos del Público"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots


#fig = go.Figure()
fig = make_subplots(specs=[[{"secondary_y": True}]])

x1 = ['BANPRO',
      'LAFISE',
      'BAC',
      'BDF',
      'FICOHSA',
      'AVANZ',
      'ATLANTIDA']

y1 = [32.1,  #Diciembre 19
      26.4,
      24.7,
      8.2,
      5.7,
      2.9,
      0.05]

y2 = [31.6,  # Agosto 20
      25.3,
      26.3,
       7.7,
       6.5,
       2.6,
       0.06]

fig.add_trace(go.Bar(
    x = x1,

y = y1,
           text=y1,
           textposition='auto',
           texttemplate = "%{text}%",
           marker={"color": '#3498DB'},
           name="Diciembre 19")
)

fig.add_trace(go.Bar(
    x = x1,
y = y2,
           text=y2,
           textposition='auto',
           texttemplate = "%{text}%",
           marker={"color": '#73C6B6'},
           name="Agosto 20")

           )


#fig['layout']['yaxis1'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='group', xaxis_type='category', legend_orientation="v",
                   title='<b></b><b>Participación de los Depósitos del Público</b><br><i>Porcentajes</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=18,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1.2, #0.9,
            y= -0.15, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%
fig.show()

# %%
"""# Participación de los Depósitos Asegurados"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots


#fig = go.Figure()
fig = make_subplots(specs=[[{"secondary_y": True}]])

x1 = ['BANPRO',
      'LAFISE',
      'BAC',
      'BDF',
      'FICOHSA',
      'AVANZ',
      'ATLANTIDA']

y1 = [18.7,  #Diciembre 19
      31.4,
      31.2,
      11.7,
      4.9,
      2.0,
      0.01]

y2 = [18.5,  #Agosto 20
      32.4,
      31.7,
      10.4,
      5.2,
      1.8,
      0.04]

fig.add_trace(go.Bar(
    x = x1,

y = y1,
           text=y1,
           textposition='auto',
           texttemplate = "%{text}%",
           marker={"color": '#DC7633'},
           name="Diciembre 19")
)

fig.add_trace(go.Bar(
    x = x1,
y = y2,
           text=y2,
           textposition='auto',
           texttemplate = "%{text}%",
           marker={"color": '#58D68D'},
           name="Agosto 20")

           )


#fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='group', xaxis_type='category', legend_orientation="v",
                   title='<b></b><b>Participación de los Depósitos Asegurados</b><br><i>Porcentajes</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=18,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1.2, #0.9,
            y= -0.15, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')


# %%
fig.show()

# %%
"""# Depósitos Garantizados / Depósitos del Público"""

import plotly.graph_objects as go

fig = go.Figure()

x1 = ["2013",
  "2014",
  "2015",
  "2016",
  "2017",
  "2018",
#  "Mar-19",
#  "Jun-19",
#  "Jul-19",
#  "Ago-19",
#   "Sep-19",
#   "Oct-19",
#   "Nov-19",
    "2019",
#    "Ene-20",
#    "Feb-20",
    'Mar-20',
#    'Abr-20',
#    'May-20',
    'Jun-20',
    'Jul-20',
    'Ago-20']

y1 = [20.7,
  19.6,
  19.3,
  20.0,
  22.1,
  21.9,
#  22.0,
#  22.5,
#  22.7,
#  23.7,
#   23.6,
 #  23.7,
 #  23.9,
    24.6,
#    24.4,
#    23.8,
    24.0,
#    24.6,
#    24.0,
     24.2,
     24.4,
     23.9]

# Offset the line length by the marker size to avoid overlapping
marker_offset = 0.04

def offset_signal(signal, marker_offset):
    if abs(signal) <= marker_offset:
        return 0
    return signal - marker_offset if signal > 0 else signal + marker_offset


fig.add_trace(go.Scatter(
    x = x1,
y = y1,
           text=y1,
           textposition='top center',
           texttemplate = "%{text}%",
           mode='markers+text',
          name="Crecimiento Interanual",
           marker=dict(size=20, color = '#76D7C4',
                              line=dict(width=2,
                                        color='#E59866'))

))




fig['layout']['yaxis1'].update(title='', range=[15, 26], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', xaxis_type='category', #legend_orientation="h",
                   title='<b></b><b>Depósitos Garantizados / Depósitos del Público </b><br><i>Saldo en millones de dólares</i>',
                  #"",
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=18,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.20, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600,



shapes=[dict(
        type='line',
        xref='x',
        yref='y',
        x0=i,
        y0=0,
        x1=i,
        y1=offset_signal(y1[i], marker_offset),
        line=dict(
            color='grey',
            width=1
        )
    ) for i in range(len(y1))]
)

fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#AED6F1')


#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

# %%
"""# Recursos del FOGADE / Depósitos Garantizados"""

import plotly.graph_objects as go

fig = go.Figure()

x1 = [  "2015",
       "2016",
       "2017",
#     "Mar-2018",
    "2018",
    "2019",
    'Mar-20',
#    'Abr-20',
#    'May-20',
     'Jun-20',
     'Jul-20',
     'Ago-20']

y1 = [   15.1,
    15.3,
    15.5,
#    15.7,
    20.9,
    22.2,
    22.3,
#    21.6,
#    22.1,
    21.8,
    21.5,
    21.5]

# Offset the line length by the marker size to avoid overlapping
#marker_offset = 0.04

#def offset_signal(signal, marker_offset):
#    if abs(signal) <= marker_offset:
#        return 0
#    return signal - marker_offset if signal > 0 else signal + marker_offset


fig.add_trace(go.Scatter(
    x = x1,
y = y1,
           text=y1,
           textposition='top center',
           texttemplate = "%{text}%",
           mode='markers+text',
          name="Crecimiento Interanual",
           marker=dict(size=40, color = '#D2B4DE',
                              line=dict(width=1,
                                        color='#E59866'))

))




fig['layout']['yaxis1'].update(title='', range=[14.3, 24], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', xaxis_type='category', #legend_orientation="h",
                   title='<b></b><b>Recursos del FOGADE / Depósitos Garantizados </b><br><i>Porcentajes</i>',
                  #"",
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=18,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.20, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
)

fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#AED6F1')


#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%
fig.show()

# %%
"""# Cobertura de Depósitos por Institución"""

import plotly.graph_objects as go
import numpy as np
#from plotly.subplots import make_subplots

fig = go.Figure()
#fig = make_subplots(specs=[[{"secondary_y": True}]])


x1 = ["LAFISE",
    "BAC",
    "BANPRO",
    "BDF",
    "FICOHSA",
    "AVANZ",
    "ATLANTIDA"]

y1 = [309.4,  #lafise  # Depósitos Asegurados
    303.6,  #bac
    176.5,  #banpro
    99.5,  #bdf
    50.1,   #ficohsa
    16.9,   #avanz
     0.4]  #Atlántida

y2 = [ -104.0,   #lafise  #Superavit - Déficit
    -98.2,   #bac
     28.9,   #banpro
    106.0,   #bdf
    155.3,   #ficohsa
    188.5,   #avanz
    205.1]    #Atlántida

y3 = list(np.repeat(204.6, 7))


fig.add_trace(go.Bar(
    x = x1,

y = y1,
           text=y1,
            textposition='auto',
           marker={"color": '#73C6B6'},
           name="Depósitos Garantizados")#,
#           secondary_y=False,
)

fig.add_trace(go.Scatter(
    x = x1,
y = y3,
           text=y3,
           textposition='top center',
           mode='lines+markers', #+text',
          name="Recursos del FOGADE: US$205.4 millones",
          fillcolor = 'rgba(40, 116, 166, 0.2)',
          stackgroup='one',
          fill = 'tozeroy' #'tonexty' #'tozeroy'

)#,
#           secondary_y=True,

           )

fig.add_trace(go.Scatter(
    x = x1,
y = y2,
           text=y2,
           textposition='top center',
           marker={"color": '#6C3483'},
           mode='lines+markers+text',
          name="Superavit-Déficit"

)#,
#           secondary_y=True,

           )




#fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', xaxis_type='category', legend_orientation="v",
                   title='<b></b><b>Cobertura de Depósitos por Institución</b><br><i>Saldo en millones de dólares</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=15,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.18, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600,

        legend=dict(
        x=0.6,
        y=1)
    )

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%
fig.show()

# %%
"""# Participación de los Cuentahabientes Garantizados"""

import plotly.graph_objects as go

fig = go.Figure()

x1 = ['BANPRO',
         'BANCENTRO',
         'BAC',
         'BDF',
         'FICOHSA',
         'AVANZ',
         'ATLANTIDA']

y1 = [33.9,
      35.6,
      22.5,
       4.0,
       1.5,
       2.5,
     0.007]

colors_bancos = ['#66A731', '#006837', '#E3002B', '#0075BF', '#07C0DB', '#F48028', '#A61A11']

fig.add_trace(go.Pie(
    labels = x1,
    values = y1,
    hole=.4, marker_colors=colors_bancos))


fig.update_layout(barmode='stack', xaxis_type='category',
                   title='<b></b><b>Participación de los Cuentahabientes Garantizados</b><br><i>Porcentajes</i><br><i>31 de Agosto 2020</i>',
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=18,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.20, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
)


import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

# %%
"""# Distribución de Depósitos Totales por Institución"""

import plotly.graph_objects as go

categorias = ['Garantizados', 'Excluidos', 'Descubiertos']
colors_pies = ['#28B463', '#F4D03F', '#E74C3C']
banpro =    [13, 29, 58]
lafise =    [29,  9, 62]
bac =       [26, 12, 62]
bdf =       [29, 31, 40]
ficohsa =   [16, 30, 54]
avanz =     [14, 35, 51]
atlantida = [10, 38, 52]
sistema =   [22, 20, 58]



trace1 = go.Pie(labels = categorias,
                   values = banpro,
                   domain = {'x': [0.0, 0.33], 'y': [0.0, 0.33]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)
 #   traces.append(trace)

trace2 = go.Pie(labels = categorias,
                   values = lafise,
                   domain = {'x': [0.0, 0.33], 'y': [0.33, 0.66]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)

trace3 = go.Pie(labels = categorias,
                   values = bac,
                   domain = {'x': [0.0, 0.33], 'y': [0.66, 1.0]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)

trace4 = go.Pie(labels = categorias,
                   values = bdf,
                   domain = {'x': [0.15, 0.66], 'y': [0.0, 0.33]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)

trace5 = go.Pie(labels = categorias,
                   values = ficohsa,
                   domain = {'x': [0.15, 0.66], 'y': [0.33, 0.66]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)

trace6 = go.Pie(labels = categorias,
                   values = avanz, ##########
                   domain =  {'x': [0.15, 0.66], 'y': [0.66, 1.0]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)

trace7 = go.Pie(labels = categorias,
                   values = atlantida,
                   domain = {'x': [0.66, 0.88], 'y': [0.0, 0.33]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)

trace8 = go.Pie(labels = categorias,
                   values = sistema,
                   domain = {'x': [0.33, 1.0], 'y': [0.33, 1.0]},
                   hoverinfo = 'label+percent+name',
                marker_colors=colors_pies)

layout = go.Layout(legend_orientation="h",
             title='<b></b><b>Distribución de los Depósitos Totales por Institución</b><br><i>Porcentajes</i><br><i>31 de Agosto 2020</i>',
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=14,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.20, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
)

fig = go.Figure(data = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8], layout = layout)

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

# %%
"""# Ditribución de los Depósitos Totales por Institución"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots


#fig = go.Figure()
fig = make_subplots(specs=[[{"secondary_y": True}]])

x1 = ['SISTEMA',
      'BANPRO',
      'LAFISE',
      'BAC',
      'BDF',
      'FICOHSA',
      'AVANZ',
      'ATLANTIDA']


y1 = [22.0,
      13.1,  #####Garantizados
      29.1,
      26.4,
      28.8,
      15.7, #Ficohsa
      14.1,
       9.6]

y2 = [20.1,
      29.0,  #####Excluidos
       9.2,
      12.4,
      30.6,
      30.0,  #Ficohsa
      34.9,
      37.7]

y3 = [57.8,
      57.9,  #####Descubiertos
      61.7,
      61.1,
      40.5,
      54.3,   #Ficohsa
      51.1,
      52.7]

texto1 = [956.4,  176.5, 309.4, 303.6,  99.5,  50.1, 16.9, 0.4]
texto2 = [874.3,  390.1,  97.6, 142.5, 105.6,  95.4, 41.7, 1.4]
texto3 = [2511.5, 778.0, 655.8, 702.0, 139.7, 172.9, 61.1, 2.0]

fig.add_trace(go.Bar(
    x = x1,
  ##'#28B463', '#F4D03F', '#E74C3C'
y = y1,
           text=texto1,
           textposition='auto',
           texttemplate = "%{text}",
           marker={"color": '#28B463'},
           name="Garantizados")
)

fig.add_trace(go.Bar(
    x = x1,
y = y2,
           text=texto2,
           textposition='auto',
           texttemplate = "%{text}",
           marker={"color": '#F4D03F'},
           name="Excluidos")

           )

fig.add_trace(go.Bar(
    x = x1,
y = y3,
           text=texto3,
           textposition='auto',
           texttemplate = "%{text}",
           marker={"color": '#E74C3C'},
           name="Descubiertos")

           )


#fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack',  xaxis_type='category', legend_orientation="v",
                   title='<b></b><b>Distribución de los Depósitos Totales por Institución</b><br><i>Saldos en millones de dólares</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=14,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1.0, #0.9,
            y= -0.15, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )
fig.update_traces( textfont_size=17) #textposition='inside',

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

# %%
"""# Cobertura de Cuentahabientes por Institución"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots


#fig = go.Figure()
fig = make_subplots(specs=[[{"secondary_y": True}]])

x1 = [
      'BANPRO',
      'LAFISE',
      'BAC',
      'BDF',
      'FICOHSA',
      'AVANZ',
      'ATLANTIDA']

y1 = [
      99.1,  #####Garantizados
      99.9,
      99.7,
      99.6,
      99.3, #Ficohsa
      99.3,
      85.6]

y2 = [
      0.9,  #####Excluidos
      0.1,
      0.3,
      0.4,
      0.7,  #Ficohsa
      0.7,
      14.4]


fig.add_trace(go.Bar(orientation='h',
    x = y1,
  ##'#28B463', '#F4D03F', '#E74C3C'
y = x1,
           text=y1,
           textposition='auto',
           texttemplate = "%{text}%",
           marker={"color": '#2E86C1'},
           name="Garantizados")
)

fig.add_trace(go.Bar(orientation='h',
    x = y2,
y = x1,
           text=y2,
           textposition='auto',
           texttemplate = "%{text}%",
           marker={"color": '#48C9B0'},
           name="Excluidos")

           )


#fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', legend_orientation="v",
                   title='<b></b><b>Cobertura de Cuentahabientes por Institución</b><br><i>Participación</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=14,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1.0, #0.9,
            y= -0.15, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )

fig.update_traces( textfont_size=17) #textposition='inside',


#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%
fig.show()

# %%
"""# Cuentahabientes Garantizados por FOGADE"""

import plotly.graph_objects as go

fig = go.Figure()

x1 = [  "2015",
        "2016",
        "2017",
        "2018",
        "2019",
       'Mar-20',
#       'Abr-20',
#       'May-20',
        'Jun-20',
        'Jul-20',
        'Ago-20']

y1 = [ 91.1,
    90.8,
    92.8,
    92.6,
    93.0,
    92.9,
#    92.9,
#    92.7,
     92.8,
     92.8,
     92.8]

# Offset the line length by the marker size to avoid overlapping
#marker_offset = 0.04

#def offset_signal(signal, marker_offset):
#    if abs(signal) <= marker_offset:
#        return 0
#    return signal - marker_offset if signal > 0 else signal + marker_offset


fig.add_trace(go.Scatter(
    x = x1,
y = y1,
           text=y1,
           textposition='top center',
           texttemplate = "%{text}%",
           mode='lines+markers+text', marker_symbol='diamond',
          name="Crecimiento Interanual",
           marker=dict(size=20, color = '#E74C3C',
                              line=dict(width=1,
                                        color='#E74C3C'))

))


fig.update_yaxes(showticklabels=False)
###fig['layout']['yaxis1'].update(title='', range=[14.3, 24], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(xaxis_type='category',  #legend_orientation="h",
                   title='<b></b><b>Cobertura Cuentahabientes Garantizados</b><br><i>(Como porcentaje del total de los cuentahabientes con Saldos hasta US$10,000.00)</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=15,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.20, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
)

fig.update_traces( textfont_size=17) #textposition='inside',

fig.update_layout(yaxis=dict(range=[80,100], nticks=20))

fig.update_yaxes(showgrid=False, gridwidth=1, gridcolor='#AED6F1')
fig.update_yaxes(showticklabels=False)

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%
fig.show()

# %%
"""# Cuentahabientes Garantizados por FOGADE"""

import plotly.graph_objects as go

fig = go.Figure()

x1 = [  '2013',
        '2014',
        "2015",
        "2016",
        "2017",
        "2018",
        "2019",
       'Mar-20',
#       'Abr-20',
#       'May-20',
        'Jun-20',
        'Jul-20',
        'Ago-20']

y1 = [ 99.3,
    99.3,
    99.3,
    99.4,
    99.5,
    99.5,
    99.5,
    99.5,
#    99.5,
#    99.5,
     99.5,
     99.5,
     99.5]

# Offset the line length by the marker size to avoid overlapping
#marker_offset = 0.04

#def offset_signal(signal, marker_offset):
#    if abs(signal) <= marker_offset:
#        return 0
#    return signal - marker_offset if signal > 0 else signal + marker_offset


fig.add_trace(go.Scatter(
    x = x1,
y = y1,
           text=y1,
           textposition='top center',
           texttemplate = "%{text}%",
           mode='lines+markers+text', marker_symbol='square',
          name="Crecimiento Interanual",
           marker=dict(size=20, color = '#E74C3C',
                              line=dict(width=1,
                                        color='#E74C3C'))

))


#fig.update_yaxes(showticklabels=False)
fig.update_yaxes(showticklabels=False)
###fig['layout']['yaxis1'].update(title='', range=[14.3, 24], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(xaxis_type='category',  #legend_orientation="h",
                   title='<b></b><b>Cobertura Cuentahabientes Garantizados</b><br><i>(Como porcentaje del total de los cuentahabientes)</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=15,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.20, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
)

fig.update_yaxes(showgrid=False, gridwidth=1, gridcolor='#AED6F1')
fig.update_traces( textfont_size=17) #textposition='inside',

fig.update_layout(yaxis=dict(range=[98,100], nticks=10))


#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%
fig.show()

# %%
"""# Recursos del FOGADE / Depósitos del Público"""

import plotly.graph_objects as go
import numpy as np
#from plotly.subplots import make_subplots

fig = go.Figure()
#fig = make_subplots(specs=[[{"secondary_y": True}]])

x1 = [#'2013',
        '2014',
        "2015",
        "2016",
        "2017",
        "2018",
        "2019",
        'Mar-20',
#       'Abr-20',
#       'May-20',
        'Jun-20',
        #'Jul-20',
        'Ago-20']

y1 = [#3.1,
      2.9,
      2.9,
      3.1,
      3.2,
      4.6,
      5.4,
      5.4,
#      5.33,
#      5.30,
      5.3,
    #  5.3,
      5.1]

fig.add_trace(go.Scatter(
    x = x1,
y = y1,
           text=y1,
           textposition='top left',
           mode='text+lines+markers', #+text',
           texttemplate = "%{text}%",
           name="Recursos del FOGADE: US$202.3",
           fillcolor = 'rgba(40, 180, 99, 0.2)',
           stackgroup='one',
           fill = 'tozeroy' #'tonexty' #'tozeroy'

)#,
#           secondary_y=True,

           )

fig.update_yaxes(showticklabels=False)
#fig.update_yaxes(showticklabels=True)
#fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', xaxis_type='category', legend_orientation="v",
                   title='<b></b><b>Recursos del FOGADE / Depósitos del Público</b><br><i>Porcentajes</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
                  font=dict(
        family="Courier New, monospace",
        size=15,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1, #0.5,
            y= -0.18, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600,

        legend=dict(
        x=0.6,
        y=1)
    )

fig.update_traces( textfont_size=17) #textposition='inside',


#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

# %%
"""# Tipos de Monedas por Depósitos y Depositantes Asegurados"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots


fig = make_subplots(rows=2, cols=2,
                    specs=[[{'type':'domain'}, {'type':'domain'}],[{'type':'domain'}, {'type':'domain'}]])#,
#                    subplot_titles=("Diciembre 2019", "Diciembre 2019", "Mayo 2020", "Mayo 2020"))

meses =  ["Diciembre 2019", "Agosto 2020"]
categorias1 = ['Moneda Nacional', 'Moneda Extranjera']
colors_pies1 = ['#2ECC71', '#5DADE2']

values1 = [62.35, 37.65] #Diciembre 2019
values2 = [62.26, 37.74] #Depositantes Cubiertos

values3 = [26.5, 73.5] #Diciembre 2019
values4 = [25.1, 74.9] #Depósitos Cubiertos

fig.add_trace(go.Pie(labels = categorias1,
                   values = values1, ##########
                   #domain =  {'x': [0.15, 0.66], 'y': [0.66, 1.0]},
                #   hoverinfo = 'label+percent+name',
                name=meses[0],
                  marker_colors=colors_pies1
                ),
              1, 1)

fig.add_trace(go.Pie(labels = categorias1,
                   values = values3, ##########
                  # domain =  {'x': [0.15, 0.66], 'y': [0.66, 1.0]},
          #         hoverinfo = 'label+percent+name',
                marker_colors=colors_pies1,
                name=meses[0]
                ),
              1, 2)

fig.add_trace(go.Pie(labels = categorias1,
                   values = values2, ##########
                 #  domain =  {'x': [0.15, 0.66], 'y': [0.66, 1.0]},
            #       hoverinfo = 'label+percent+name',
                marker_colors=colors_pies1,
                name=meses[1]
                ),
              2, 1)


fig.add_trace(go.Pie(labels = categorias1,
                   values = values4, ##########
                  # domain =  {'x': [0.15, 0.66], 'y': [0.66, 1.0]},
            #       hoverinfo = 'label+percent+name',
                marker_colors=colors_pies1,
                name=meses[1]
                ),
              2, 2)

fig.update_traces(hole=.0, hoverinfo="label+percent+name")

fig.update_layout( #title='<b></b><b>Recursos del FOGADE / Depósitos del Público</b><br><i>Porcentajes</i><br><i>31 de Agosto 2020</i>',
                  paper_bgcolor='rgb(206, 220, 227)',
                  plot_bgcolor='rgb(206, 220, 227)',
 #                 font=dict(
 #       family="Courier New, monospace",
 #       size=15,
 #       color="#000000"
 #       ),
       annotations=[
        dict(
            x= 0.5, #0.5,
            y= -0.18, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper"),

            dict(text='Depositantes Garantizados por Tipos de Moneda', x=0.00, y=1.2, font_size=22, showarrow=False),
            dict(text='Depositos Garantizados por Tipos de Moneda', x=0.97, y=1.2, font_size=22, showarrow=False),
             dict(text=meses[0], x=0.17, y=1.1, font_size=20, showarrow=False),
                 dict(text=meses[0], x=0.84, y=1.1, font_size=20, showarrow=False),
                   dict(text=meses[1], x=0.18, y=0.5, font_size=20, showarrow=False),
                   dict(text=meses[1], x=0.82, y=0.5, font_size=20, showarrow=False)
],

            autosize=False,
            width=1200,
            height=600,


        legend=dict(
        x=0.4,
        y=0.5)
    )

#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

# %%
"""# Promedio de Depósitos Garantizados"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots


#fig = go.Figure()
fig = make_subplots(specs=[[{"secondary_y": True}]])

colors_bancos = ['#66A731', '#006837', '#E3002B', '#0075BF', '#07C0DB', '#F48028', '#A61A11', '#979A9A']


x1 = [
      'BANPRO',
      'LAFISE',
      'BAC',
      'BDF',
      'FICOHSA',
      'AVANZ',
      'ATLANTIDA',
      'SISTEMA']

y1 = [338,
       565,
      875,
     1611,
     2174,
     447,
     3217,
     621]



fig.add_trace(go.Bar(orientation='h',
    x = y1,
  ##'#28B463', '#F4D03F', '#E74C3C'
y = x1,
           text=y1,
           textposition='auto',
           texttemplate = "%{text}",
           marker_color=colors_bancos,
           name="Garantizados")
)


fig.update_xaxes(showticklabels=False)
#fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', legend_orientation="h",   xaxis_type='linear',
                   title='<b></b><b>Promedio de Depósitos Garantizados</b><br><i>Dólares</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=14,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1.0, #0.9,
            y= -0.15, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )

fig.update_traces( textfont_size=17) #textposition='inside',


#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')

# %%
fig.show()

##
"""# Promedio de Depósitos Excluidos"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots


#fig = go.Figure()
fig = make_subplots(specs=[[{"secondary_y": True}]])

colors_bancos = ['#66A731', '#006837', '#E3002B', '#0075BF', '#07C0DB', '#F48028', '#A61A11', '#979A9A']


x1 = [
      'BANPRO',
      'LAFISE',
      'BAC',
      'BDF',
      'FICOHSA',
      'AVANZ',
      'ATLANTIDA',
      'SISTEMA']

y1 = [84075,
              127856,
              155698,
              379954,
              603924,
              151790,
               75303,
              124056]



fig.add_trace(go.Bar(orientation='h',
    x = y1,
  ##'#28B463', '#F4D03F', '#E74C3C'
y = x1,
           text=y1,
           textposition='auto',
           texttemplate = "%{text}",
           marker_color=colors_bancos,
           name="Garantizados")
)


fig.update_xaxes(showticklabels=False)
#fig['layout']['yaxis2'].update(title='', range=[-20, 22], autorange=False)
#fig['layout']['yaxis2']['showgrid'] = False


fig.update_layout(barmode='stack', legend_orientation="h",   xaxis_type='linear',
                   title='<b></b><b>Promedio de Depósitos Excluidos</b><br><i>Dólares</i><br><i>31 de Agosto 2020</i>',
                  #"",
                  paper_bgcolor='rgb(255, 255, 255)',
                  plot_bgcolor='rgb(255, 255, 255)',
                  font=dict(
        family="Courier New, monospace",
        size=14,
        color="#000000"
        ),
       annotations=[
        dict(
            x= 1.0, #0.9,
            y= -0.15, #-0.15,
            showarrow=False,
            text="Fuente: FOGADE",
            xref="paper",
            yref="paper")],

            autosize=False,
            width=1200,
            height=600
    )

fig.update_traces( textfont_size=17) #textposition='inside',


#plot(fig, auto_open=True)
import plotly.offline
import plotly.graph_objs as go

plotly.offline.plot(fig,
                    image_width='1200',
                   image_height='600',
                     image='svg', image_filename='test')
# %%
fig.show()
